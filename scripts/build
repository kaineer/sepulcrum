#!/usr/bin/ruby

$:.unshift( "." )
$:.unshift( "lib" )

require 'rubygems'
require 'yaml'
require "scripts/lib/utils"

require 'ream/sources/fs'
require 'ream/blog/template_cache'
require 'ream/blog/template_processor'
require 'ream/blog/overrides/string'
require 'ream/blog/overrides/hash'

require 'ream/onion'

include Utils::Log


module TemplateParameter
  @@parameters = []

  def self.[]( key )
    klazz = has_key?( key )
    klazz ? klazz.new( key ).value : nil
  end

  def self.has_key?( key )
    @@parameters.find{|klazz|
      klazz.matches?( key )
    }
  end
end

module Sepulcrum
  class Build
    
    class SourceHash
      def initialize( obj )
        case obj
        when Hash then init_with_hash( obj )
        when String then init_with_hash( YAML.load( obj ) )
        end
      end

      def init_with_hash( hash )
        @root = hash[ "root" ]
        @mask = hash[ "mask" ]
        @map  = hash[ "map" ]
      end

      attr_reader :root, :mask, :map

      def wildcard
        File.join( root, mask )
      end
    end


    include Utils::Log

    def initialize
      load_template_processors
      load_common_parameters
    end

    def templates
      @templates ||= cache( "templates.source" )
    end

    def pages
      @pages ||= cache( "pages.source" )
    end

    def build_pages
      self.pages.each do |path, value|
        build_page( path, value )
      end
    end

    def build_page( path, value )
      environment = value[ "environment" ]
      parameters  = value[ "parameters" ]
      parameters  = {} unless parameters.is_a?( Hash )

      layout_templates = environment[ "templates" ]

      layout = templates.fetch( layout_templates )

      params = Ream::Onion.new
      params << { "page:content" => value[ "page:content", TemplateParameter ] }
      params << parameters

      content = layout[ "html:page", params ]

      dir_map  = "site/#{(environment[ 'map' ][ 'dir' ] rescue nil ) || '%p'}"
      file_map = "#{dir_map}/#{(environment[ 'map' ][ 'filename' ] rescue nil ) || '%n.html'}"

      dir = path.path.map( dir_map )
      FileUtils.mkdir_p( dir )

      out_file = path.path.map( file_map )
      debug( "#{path} -> #{out_file}" )

      File.open( out_file, "w" ) { |f|
        f.write( content )
      }
    end

  protected

    def sources_config
      @sources_config ||= Ream::Template.scan( "config/sources.tpl" )
    end

    def processors_mask
      SourceHash.
        new( sources_config[ "yaml:processors.source" ] ).wildcard
    end

    def load_template_processors
      info( "load_template_processors" )

      Dir[ processors_mask ].each do |filename|
        debug( "Template processor: #{filename}" )
        require filename unless File.directory?( filename )
      end
    end

    def load_common_parameters
      Dir[ "config/parameters/**.rb" ].each {|fn| require fn}
    end

    def expanded_sources_config
      @expanded_sources_config ||= 
        sources_config.with( Ream::Blog::TemplateProcessor )
    end

    def source( template_name )
      hash = SourceHash.
        new( expanded_sources_config[ template_name ] )
      Ream::Sources::FS.new( hash.root, hash.mask )
    end

    def cache( template_name )
      Ream::Blog::TemplateCache.new( source( template_name ) )
    end
  end
end

sb = Sepulcrum::Build.new
sb.build_pages

debug( 'ok.' )
