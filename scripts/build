#!/usr/bin/ruby

$:.unshift( "." )
$:.unshift( "lib" )

require 'rubygems'
require 'yaml'
require "scripts/lib/utils"

require 'ream/blog/sources'
require 'ream/blog/transformations'

require 'ream/blog/configuration'

require 'ream/sources/fs'
require 'ream/blog/template_cache'
require 'ream/blog/template_processor'
require 'ream/blog/template_processor/defaults'
require 'ream/blog/overrides/string'

require 'ream/onion'

include Utils::Log


module TemplateParameter
  @@parameters = []

  def self.[]( key )
    klazz = has_key?( key )
    klazz ? klazz.new( key ).value : nil
  end

  def self.has_key?( key )
    @@parameters.find{|klazz|
      klazz.matches?( key )
    }
  end
end

module Sepulcrum
  class Build

    include Utils::Log

    def initialize
      load_template_processors
      load_common_parameters
    end

    def templates
      @templates ||= cache( "templates.source" )
    end

    def make_transformations
      transformations.each do |transformation|
        info( "Starting transformation.." )
        transformation.sources.each do |source_name|
          transform_source( transformation, cache( source_name ) )
        end
        info( ".. done transformation." )
      end
    end

    def transform_source( transformation, source )
      source.each do |path, value|
        dst_path = path.path.map( transformation.file_map )

        environment = value[ "environment" ]

        parameters = value[ "parameters" ]
        parameters = {} unless parameters.is_a?( Hash )
        
        layout_templates = transformation.templates | ( environment[ "templates" ] || [] )

        layout = templates.fetch( layout_templates )

        if ( File.mtime( dst_path ) < [ layout.mtime, value.mtime ].max )
          info( "  Transforming path #{path} -> #{dst_path}.." )

          params = Ream::Onion.new
          params << { "page:content" => value[ "page:content", TemplateParameter ], "page:path" => path }
          params << parameters

          content = layout[ "html:page", params ]

          FileUtils.mkdir_p( path.path.map( transformation.dir_map ) )

          File.open( dst_path, "w" ) do |f|
            f.write( content )
          end
        end
      end
    end

  protected

    def sources
      @sources ||= Ream::Blog::Sources.new
    end

    def load_template_processors
      info( "load_template_processors" )

      Dir[ Ream::Blog::Configuration.processors ].each do |filename|
        debug( "Template processor: #{filename}" )
        require filename unless File.directory?( filename )
      end
    end

    def load_common_parameters
      info( "load_common_parameters" )
      Dir[ "config/parameters/**.rb" ].each {|fn| require fn}
    end

    def cache( sources_name )
      Ream::Blog::TemplateCache.new( sources[ sources_name ] )
    end

    def transformations
      @transformations ||= Ream::Blog::Transformations.new.transformations
    end
  end
end

sb = Sepulcrum::Build.new
sb.make_transformations

debug( 'ok.' )
